{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 01_basic_extraction.ipynb\n",
        "## 基本的なPDF抽出機能のテスト\n",
        "\n",
        "このノートブックでは、PDFからテキスト情報を抽出する基本機能をテストします。\n",
        "1. PyPDF2によるテキスト抽出\n",
        "2. PDF画像としての処理（画像ベースPDF用）\n",
        "3. 簡易OCR機能テスト\n",
        "4. 抽出結果の確認と評価"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 必要なライブラリのインポート\n",
        "import os\n",
        "import sys\n",
        "import json\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# PyPDF2を使用したPDF処理\n",
        "import PyPDF2\n",
        "\n",
        "# 画像処理用\n",
        "from PIL import Image\n",
        "import pdf2image\n",
        "\n",
        "# OCR用\n",
        "import pytesseract\n",
        "\n",
        "# モジュールの親ディレクトリをパスに追加\n",
        "sys.path.append('..')\n",
        "\n",
        "# プロジェクトルートパスの設定\n",
        "ROOT_DIR = Path('..').resolve()\n",
        "DATA_DIR = ROOT_DIR / 'data'\n",
        "INPUT_DIR = DATA_DIR / 'input'\n",
        "OUTPUT_DIR = DATA_DIR / 'output'\n",
        "TEMP_DIR = DATA_DIR / 'temp'\n",
        "\n",
        "# 出力ディレクトリを作成\n",
        "os.makedirs(OUTPUT_DIR, exist_ok=True)\n",
        "os.makedirs(TEMP_DIR, exist_ok=True)"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. PDFファイルの読み込みと基本情報の確認"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 利用可能なPDFファイルの一覧を取得\n",
        "pdf_files = list(INPUT_DIR.glob('*.pdf'))\n",
        "print(f\"利用可能なPDFファイル: {[p.name for p in pdf_files]}\")\n",
        "\n",
        "# テスト対象のPDFファイルを選択\n",
        "test_pdf = pdf_files[0]  # インデックスを変更して別のファイルを選択可能\n",
        "print(f\"選択したPDFファイル: {test_pdf.name}\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# PDFの基本情報を取得\n",
        "def get_pdf_info(pdf_path):\n",
        "    with open(pdf_path, 'rb') as f:\n",
        "        reader = PyPDF2.PdfReader(f)\n",
        "        info = {\n",
        "            'ページ数': len(reader.pages),\n",
        "            'メタデータ': reader.metadata,\n",
        "            'ファイルサイズ': os.path.getsize(pdf_path) / 1024,  # KB単位\n",
        "        }\n",
        "        return info\n",
        "\n",
        "pdf_info = get_pdf_info(test_pdf)\n",
        "print(\"PDF基本情報:\")\n",
        "for key, value in pdf_info.items():\n",
        "    print(f\"{key}: {value}\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. PyPDF2によるテキスト抽出"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# PyPDF2を使用したテキスト抽出\n",
        "def extract_text_with_pypdf2(pdf_path):\n",
        "    with open(pdf_path, 'rb') as f:\n",
        "        reader = PyPDF2.PdfReader(f)\n",
        "        text_by_page = []\n",
        "        \n",
        "        for page_num, page in enumerate(reader.pages):\n",
        "            text = page.extract_text()\n",
        "            text_by_page.append({\n",
        "                'page_num': page_num + 1,\n",
        "                'text': text\n",
        "            })\n",
        "            \n",
        "        return text_by_page\n",
        "\n",
        "pypdf2_text = extract_text_with_pypdf2(test_pdf)\n",
        "\n",
        "# 抽出結果の表示\n",
        "for page in pypdf2_text:\n",
        "    print(f\"=== ページ {page['page_num']} ===\\n\")\n",
        "    print(page['text'][:500] + '...' if len(page['text']) > 500 else page['text'])\n",
        "    print('\\n')"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. PyPDF2での抽出が不十分な場合は画像ベースの処理を実施"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 抽出テキストの品質評価（簡易）\n",
        "def evaluate_text_quality(text):\n",
        "    # テキストが空か短すぎる場合は低品質と判断\n",
        "    if not text or len(text.strip()) < 50:\n",
        "        return False\n",
        "    \n",
        "    # 特定のキーワードが含まれているか確認（活動計算書の場合）\n",
        "    keywords = ['活動', '計算', '収入', '支出', '合計']\n",
        "    keyword_count = sum(1 for kw in keywords if kw in text)\n",
        "    \n",
        "    # キーワードが2つ以上含まれていれば十分と判断\n",
        "    return keyword_count >= 2\n",
        "\n",
        "# PyPDF2で抽出したテキストの品質を評価\n",
        "text_quality = [evaluate_text_quality(page['text']) for page in pypdf2_text]\n",
        "print(f\"ページごとのテキスト品質: {text_quality}\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# PDFを画像に変換\n",
        "def convert_pdf_to_images(pdf_path, output_dir):\n",
        "    images = pdf2image.convert_from_path(pdf_path, dpi=300)\n",
        "    image_paths = []\n",
        "    \n",
        "    for i, img in enumerate(images):\n",
        "        img_path = output_dir / f\"{pdf_path.stem}_page_{i+1}.png\"\n",
        "        img.save(img_path)\n",
        "        image_paths.append(img_path)\n",
        "    \n",
        "    return image_paths\n",
        "\n",
        "# テスト用PDFを画像に変換\n",
        "image_paths = convert_pdf_to_images(test_pdf, TEMP_DIR)\n",
        "print(f\"生成された画像ファイル: {[p.name for p in image_paths]}\")\n",
        "\n",
        "# 最初のページ画像を表示\n",
        "plt.figure(figsize=(10, 14))\n",
        "img = Image.open(image_paths[0])\n",
        "plt.imshow(np.array(img))\n",
        "plt.axis('off')\n",
        "plt.title(f\"Page 1 of {test_pdf.name}\")\n",
        "plt.show()"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. OCRによるテキスト抽出（Tesseractを使用）"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 画像からOCRでテキスト抽出\n",
        "def extract_text_with_ocr(image_path, lang='jpn'):\n",
        "    img = Image.open(image_path)\n",
        "    text = pytesseract.image_to_string(img, lang=lang)\n",
        "    return text\n",
        "\n",
        "# 品質が低いページに対してOCRを実行\n",
        "ocr_results = []\n",
        "\n",
        "for i, is_good_quality in enumerate(text_quality):\n",
        "    if not is_good_quality:\n",
        "        print(f\"ページ {i+1} の品質が低いためOCRを実行中...\")\n",
        "        ocr_text = extract_text_with_ocr(image_paths[i])\n",
        "        ocr_results.append({\n",
        "            'page_num': i + 1,\n",
        "            'text': ocr_text\n",
        "        })\n",
        "        \n",
        "        # OCR結果を表示\n",
        "        print(f\"=== OCR結果 (ページ {i+1}) ===\\n\")\n",
        "        print(ocr_text[:500] + '...' if len(ocr_text) > 500 else ocr_text)\n",
        "        print('\\n')"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. テキストからの活動計算書のデータ抽出（簡易版）"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 活動計算書の主要項目に関する簡易パターンマッチング\n",
        "def extract_financial_items(text):\n",
        "    import re\n",
        "    \n",
        "    items = {}\n",
        "    \n",
        "    # 収入・支出・合計などの基本パターン\n",
        "    patterns = {\n",
        "        '経常収益': r'経常収益[\\s\\S]*?合計[\\s]*([\\d,]+)',\n",
        "        '経常費用': r'経常費用[\\s\\S]*?合計[\\s]*([\\d,]+)',\n",
        "        '当期経常増減額': r'当期経常増減額[\\s]*([\\d,▲-]+)',\n",
        "        '当期正味財産増減額': r'当期正味財産増減額[\\s]*([\\d,▲-]+)',\n",
        "        '正味財産期首残高': r'正味財産期首残高[\\s]*([\\d,]+)',\n",
        "        '正味財産期末残高': r'正味財産期末残高[\\s]*([\\d,]+)'\n",
        "    }\n",
        "    \n",
        "    for key, pattern in patterns.items():\n",
        "        match = re.search(pattern, text)\n",
        "        if match:\n",
        "            # カンマを除去して数値化\n",
        "            value_str = match.group(1).replace(',', '')\n",
        "            # マイナス記号の処理（▲や-）\n",
        "            if '▲' in value_str or '-' in value_str:\n",
        "                value_str = value_str.replace('▲', '').replace('-', '')\n",
        "                items[key] = -int(value_str)\n",
        "            else:\n",
        "                items[key] = int(value_str)\n",
        "                \n",
        "    return items\n",
        "\n",
        "# 抽出テキストから財務項目を取得\n",
        "# すべてのページのテキストを結合\n",
        "all_text = '\\n'.join([page['text'] for page in pypdf2_text])\n",
        "\n",
        "# OCR結果も追加\n",
        "if ocr_results:\n",
        "    all_text += '\\n' + '\\n'.join([page['text'] for page in ocr_results])\n",
        "\n",
        "# 財務項目の抽出\n",
        "financial_items = extract_financial_items(all_text)\n",
        "\n",
        "# 結果の表示\n",
        "print(\"抽出された財務項目:\")\n",
        "for key, value in financial_items.items():\n",
        "    print(f\"{key}: {value:,}円\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 6. 抽出結果の保存"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 結果をJSONで保存\n",
        "result = {\n",
        "    'pdf_info': pdf_info,\n",
        "    'extraction_method': 'PyPDF2',\n",
        "    'ocr_used': len(ocr_results) > 0,\n",
        "    'financial_items': financial_items,\n",
        "    'text_quality': {f\"page_{i+1}\": quality for i, quality in enumerate(text_quality)}\n",
        "}\n",
        "\n",
        "output_file = OUTPUT_DIR / f\"{test_pdf.stem}_extraction_result.json\"\n",
        "with open(output_file, 'w', encoding='utf-8') as f:\n",
        "    json.dump(result, f, ensure_ascii=False, indent=2)\n",
        "\n",
        "print(f\"結果を保存しました: {output_file}\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 7. 抽出結果の評価"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# 抽出結果の評価\n",
        "def evaluate_extraction(financial_items):\n",
        "    # 主要な項目が抽出できたか確認\n",
        "    key_items = ['経常収益', '経常費用', '当期経常増減額', '正味財産期末残高']\n",
        "    extracted_keys = financial_items.keys()\n",
        "    \n",
        "    found_items = [item for item in key_items if item in extracted_keys]\n",
        "    missing_items = [item for item in key_items if item not in extracted_keys]\n",
        "    \n",
        "    # 整合性チェック（例: 収益-費用=増減額）\n",
        "    consistency_errors = []\n",
        "    if all(k in financial_items for k in ['経常収益', '経常費用', '当期経常増減額']):\n",
        "        expected_diff = financial_items['経常収益'] - financial_items['経常費用']\n",
        "        actual_diff = financial_items['当期経常増減額']\n",
        "        if expected_diff != actual_diff:\n",
        "            consistency_errors.append(\n",
        "                f\"経常収益-経常費用 ({expected_diff:,}円) ≠ 当期経常増減額 ({actual_diff:,}円)\"\n",
        "            )\n",
        "    \n",
        "    # 評価結果\n",
        "    evaluation = {\n",
        "        '抽出率': len(found_items) / len(key_items) if key_items else 0,\n",
        "        '抽出できた項目': found_items,\n",
        "        '抽出できなかった項目': missing_items,\n",
        "        '整合性エラー': consistency_errors\n",
        "    }\n",
        "    \n",
        "    return evaluation\n",
        "\n",
        "# 抽出結果の評価を実施\n",
        "evaluation = evaluate_extraction(financial_items)\n",
        "\n",
        "print(f\"抽出率: {evaluation['抽出率']*100:.1f}%\")\n",
        "print(f\"抽出できた項目: {', '.join(evaluation['抽出できた項目'])}\")\n",
        "\n",
        "if evaluation['抽出できなかった項目']:\n",
        "    print(f\"抽出できなかった項目: {', '.join(evaluation['抽出できなかった項目'])}\")\n",
        "else:\n",
        "    print(\"すべての主要項目が抽出できました。\")\n",
        "    \n",
        "if evaluation['整合性エラー']:\n",
        "    print(\"整合性エラー:\")\n",
        "    for error in evaluation['整合性エラー']:\n",
        "        print(f\"- {error}\")\n",
        "else:\n",
        "    print(\"整合性チェックは問題ありませんでした。\")"
      ],
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 8. まとめと次のステップ"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 抽出テスト結果のまとめ\n",
        "\n",
        "- PyPDF2によるテキスト抽出の品質: ページごとに異なる\n",
        "- OCRの必要性: テキスト品質が低いページに対して実施\n",
        "- 財務項目の抽出精度: 主要項目の抽出率で評価\n",
        "- 整合性確認: 項目間の関係性が正しいか検証\n",
        "\n",
        "### 次のステップ\n",
        "\n",
        "1. **OCR品質の向上**\n",
        "   - 画像前処理の改善 (コントラスト調整、ノイズ除去等)\n",
        "   - OCRエンジンのパラメータ最適化\n",
        "\n",
        "2. **パターン認識の強化**\n",
        "   - より複雑な財務項目の抽出パターン開発\n",
        "   - 階層構造の認識改善\n",
        "\n",
        "3. **複数形式への対応**\n",
        "   - 異なる様式の活動計算書への対応\n",
        "   - 形式に応じた抽出戦略の切り替え\n",
        "\n",
        "4. **AI活用の検討**\n",
        "   - 抽出したテキストからのAIによる構造化支援\n",
        "   - 整合性チェックの高度化\n",
        "\n",
        "次のノートブック `02_ocr_testing.ipynb` ではOCR機能に特化したテストを行います。"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}